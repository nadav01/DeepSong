
from xml.etree.ElementTree import Element, SubElement, Comment, tostring
import datetime
from xml.etree import ElementTree
from xml.dom import minidom

def prettify(elem):
    """Return a pretty-printed XML string for the Element.
    """
    rough_string = ElementTree.tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="  ")


def extract_names(filename):
    with open(filename, 'r+', encoding='utf8') as f:
        my_list = f.read()
        my_list = my_list.split("\n")
        return my_list[:-1]


'''
This function recieves the stanza and the artist list and extracts a TEI file for the stanza
'''
def make_stanza_tei(the_stanza, artists_file, date):
    artist_list = extract_names(artists_file)
    stanza_list = the_stanza.split(" ")
    song_name = stanza_list[0] + " " + stanza_list[1]

    generated_on = str(datetime.datetime.now())

    # Configure one attribute with set()
    root = Element('TEI')
    root.set('xmlns', 'http://www.tei-c.org/ns/1.0')

    root.append(Comment('Generated by Song Genreator - Oren Sheffer and Nadav Loebl'))

    head = SubElement(root, 'teiHeader')
    fileDesc = SubElement(head, 'fileDesc')
    titleStmt = SubElement(fileDesc, 'titleStmt')
    song_title = SubElement(titleStmt, 'title')
    song_title.text = song_name
    author_list_from_which_created = SubElement(titleStmt, 'authors')
    author_list_from_which_created.text = str(artist_list)
    respStmt1 = SubElement(titleStmt, 'respStmt')
    respStmt2 = SubElement(titleStmt, 'respStmt')
    resp1 = SubElement(respStmt1, 'resp')
    resp2 = SubElement(respStmt2, 'resp')
    resp1.text = "year that stanza would have been written (average of the years when artists that were used were active)"
    resp2.text = "album name (randomize album name from artists that were used)"
    average_active_start_year = SubElement(respStmt1, 'date')
    average_active_start_year.text = date
    random_album_name = SubElement(respStmt2, 'album')
    random_album_name.text = "some random album name"


    publicationStmt = SubElement(fileDesc, 'publicationStmt')
    publisher = SubElement(publicationStmt, 'publisher')
    publisher.text = 'Oren Sheffer and Nadav Loebel Ben-Gurion University in Beer-Sheva'
    date = SubElement(publicationStmt, 'datetime')
    date.text = generated_on
    availability = SubElement(publicationStmt, 'availability')
    p_avail = SubElement(availability, 'p')
    p_avail.text = 'Available in the dhcs181 library with permissions only - please refer to Oren/Nadav for more information'

    sourceDesc = SubElement(fileDesc, 'sourceDesc')
    p11 = SubElement(sourceDesc, 'p')
    p11.text = 'DeepSong: a deep learning automatic song creator'
    p12 = SubElement(sourceDesc, 'p')
    p12.text = 'wikiLytics.com: put url here'
    p13 = SubElement(sourceDesc, 'p')
    p13.text = 'dbpedia + sparql: url here'

    encodingDesc = SubElement(head, 'encodingDesc')
    projectDesc = SubElement(encodingDesc, 'projectDesc')
    p5 = SubElement(projectDesc, 'p')
    p5.text = 'As Part of the Digital Humanities for Computer Science course, this is an automatic generated TIE for a song generated by DeepSong'

    profileDesc = SubElement(head, 'profileDesc')
    langUsage = SubElement(profileDesc, 'langUsage')
    language = SubElement(langUsage, 'language')
    language.set('ident', 'en')
    language.text = 'English'

    body = SubElement(root, 'body')
    stanza = SubElement(body, 'headline')
    stanza.text = song_name
    stanza = SubElement(body, 'lg')
    stanza.set('type', 'stanza')
    stanza.text = the_stanza

    #print (prettify(root))
    with open("stanza.xml", "w") as file_to:
        file_to.write(prettify(root))

    print('The file has been saved.')

#the_stanza1 = "this is an example for a stanza. so good. so accurate"
#make_stanza_tei(the_stanza1, "60s.txt", "1965")